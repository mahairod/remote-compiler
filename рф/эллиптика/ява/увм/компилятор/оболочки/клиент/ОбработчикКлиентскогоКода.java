/*
 * Авторские права ↄ⃝ 2015, Антон Астафьев Ѱ҃
 *
 * Этот код — свободное программное обеспечение. Вы можете распространять и/или изменять его
 * при условии соблюдения положений Универсальной общественной лицензии GNU только 2-й версии, как
 * опубликовано Фондом Свободных Программ.
 *
 * Этот код распространяется с надеждой на то, что он будет полезен,
 * но БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемой гарантии КОММЕРЧЕСКОЙ ЦЕННОСТИ или
 * СООТВЕТСТВИЯ КОНКРЕТНОМУ ПРЕДНАЗНАЧЕНИЮ. Смотрите текст Универсальной общественной лицензии GNU
 * 2-й версии для подробного объяснения (копия включена в файл ЛИЦЕНЗИЯ, поставляемый с этим кодом).
 *
 */

/**
 * 
 */
package рф.эллиптика.ява.увм.компилятор.оболочки.клиент;

import com.sun.tools.javac.api.ClientCodeWrapper.WrappedClientCode;

import рф.эллиптика.ява.увм.компилятор.маркеры.СопряжениеТелеМаркер;
import рф.эллиптика.ява.увм.компилятор.оболочки.ОболочкаТелеКласса;
import рф.эллиптика.ява.увм.компилятор.оболочки.Оболочки;
import рф.эллиптика.ява.увм.компилятор.оболочки.Оболочки.ФабрикаКлиентскойОболочки;
import рф.эллиптика.ява.увм.компилятор.оболочки.клиент.КлиентскийГардероб.ДополнительноеДействие;

/**
 * Тип <code>ОбработчикКлиентскогоКода</code> предназначен для 
 * 
 * @author Антон Астафьев
 * @since Ява-8
 * 
 */
public class ОбработчикКлиентскогоКода extends ОбработчикПрокси {
	
	private КлиентскийГардероб гардероб = new КлиентскийГардероб();

	protected <ЛокальныйТип, ТипПрокси extends СопряжениеТелеМаркер, ТипОболочки extends ОболочкаТелеКласса<ЛокальныйТип, ТипПрокси>>
	ТипПрокси заверниКлиентскийКод(ТипПрокси прокси) {
		return прокси;
	}

	public <ЛокальныйТип, ТипПрокси extends СопряжениеТелеМаркер, ТипОболочки extends СопряжениеТелеМаркер & ОболочкаТелеКласса<ЛокальныйТип, ТипПрокси>>
	ТипПрокси переоденьДляСети(WrappedClientCode<ЛокальныйТип> значение){
		ДополнительноеДействие<ЛокальныйТип, ТипПрокси> равёртка = new ДополнительноеДействие<ЛокальныйТип, ТипПрокси>() {
			@Подмени
			public ТипПрокси выполни(ОболочкаТелеКласса<ЛокальныйТип, ТипПрокси> оболочка) {
				return (ТипПрокси) ОбработчикКлиентскогоКода.super.переоденьДляСети(оболочка);
			}
		};
		return гардероб.переоденьДляСети(значение, равёртка);
	}
	
	@Подмени
	public <ЛокальныйТип, ТипПрокси extends СопряжениеТелеМаркер, ТипОболочки extends ОболочкаТелеКласса<ЛокальныйТип, ТипПрокси>>
	ЛокальныйТип переоденьДляКлиента(ТипПрокси значение){
		if (значение instanceof Наряженный ){
			Наряженный<ТипПрокси> наряженный = (Наряженный<ТипПрокси>)значение;
			ТипПрокси ядро = наряженный.разверни();
			
			ОболочкаТелеКласса<Object, СопряжениеТелеМаркер> оболочкаПрокси = создайТелеОболочку(ядро);

			ФабрикаКлиентскойОболочки<?, ? extends СопряжениеТелеМаркер> фабрика = Оболочки.дайФабрику(оболочкаПрокси.getClass());

			return (ЛокальныйТип) фабрика.создай(оболочкаПрокси);

		} else {
			return super.переоденьДляКлиента(значение);
		}
		
	}

	public static ОбработчикКлиентскогоКода создайЭкземпляр(){
		return new ОбработчикКлиентскогоКода();
	}

}
