/*
 * Авторские права ↄ⃝ 2015, Антон Астафьев Ѱ҃
 *
 * Этот код — свободное программное обеспечение. Вы можете распространять и/или изменять его
 * при условии соблюдения положений Универсальной общественной лицензии GNU только 2-й версии, как
 * опубликовано Фондом Свободных Программ.
 *
 * Этот код распространяется с надеждой на то, что он будет полезен,
 * но БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемой гарантии КОММЕРЧЕСКОЙ ЦЕННОСТИ или
 * СООТВЕТСТВИЯ КОНКРЕТНОМУ ПРЕДНАЗНАЧЕНИЮ. Смотрите текст Универсальной общественной лицензии GNU
 * 2-й версии для подробного объяснения (копия включена в файл ЛИЦЕНЗИЯ, поставляемый с этим кодом).
 *
 */

package рф.эллиптика.ява.увм.компилятор.оболочки;

import java.rmi.RemoteException;

import рф.эллиптика.ява.увм.КонстПарсера;
import рф.эллиптика.ява.увм.ШлюзовойКласс;
import рф.эллиптика.ява.увм.ОбъявлениеДелегирования;
import рф.эллиптика.ява.увм.компилятор.маркеры.СопряжениеТелеМаркер;
import рф.эллиптика.ява.увм.компилятор.оболочки.клиент.ОбработчикКлиентскогоКода;

import java.util.logging.Level;

import com.sun.tools.javac.api.ClientCodeWrapper.WrappedClientCode;

/**
 *
 * @author Антон Астафьев
 */
interface РасширениеОболочкиТелеКласса<База> extends ШлюзовойКласс {
	default
	@Подмени @Подмени
	<ТипПрокси extends СопряжениеТелеМаркер, WrappedCode extends WrappedClientCode<Object> >
	СопряжениеТелеМаркер внешнееПредставление(WrappedCode оболочка){
		return ОбработчикКлиентскогоКода.создайЭкземпляр().переоденьДляСети(оболочка);
	}

	@Подмени @Подмени
	default <ТипПрокси extends СопряжениеТелеМаркер, ТипОболочки extends СопряжениеТелеМаркер & ОболочкаТелеКласса<Object, ТипПрокси> >
	ТипПрокси внешнееПредставление(ТипОболочки оболочка){
		return ОбработчикКлиентскогоКода.создайЭкземпляр().переоденьДляСети(оболочка);
	}

	@Подмени @Подмени
	default <ТипПрокси extends СопряжениеТелеМаркер, ТипОболочки extends СопряжениеТелеМаркер & ОболочкаТелеКласса<Object, ТипПрокси> >
	ТипОболочки внутреннееПредставление(ТипПрокси сырой){
		return ОбработчикКлиентскогоКода.создайЭкземпляр().переоденьДляКлиента(сырой);
	}

	@Подмени @Подмени
	default <Рез> Рез сообщиОбОшибке(RemoteException ex){
		LOGGER.log(Level.SEVERE, "Проблема при вызове телеметода ТелеКласса " + дайОснову().getClass().getName(), ex);
		throw new IllegalStateException(ex);
	}
	
	default ДелегированиеОболочки делегатИсполнитель(){
		return new ДелегированиеОболочки( (ОболочкаТелеКласса<?, ?>) this);
	}
}
