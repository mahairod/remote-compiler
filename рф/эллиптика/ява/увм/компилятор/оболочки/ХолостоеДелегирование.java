/*
 * Авторские права ↄ⃝ 2015, Антон Астафьев Ѱ҃
 *
 * Этот код — свободное программное обеспечение. Вы можете распространять и/или изменять его
 * при условии соблюдения положений Универсальной общественной лицензии GNU только 2-й версии, как
 * опубликовано Фондом Свободных Программ.
 *
 * Этот код распространяется с надеждой на то, что он будет полезен,
 * но БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемой гарантии КОММЕРЧЕСКОЙ ЦЕННОСТИ или
 * СООТВЕТСТВИЯ КОНКРЕТНОМУ ПРЕДНАЗНАЧЕНИЮ. Смотрите текст Универсальной общественной лицензии GNU
 * 2-й версии для подробного объяснения (копия включена в файл ЛИЦЕНЗИЯ, поставляемый с этим кодом).
 *
 */

package рф.эллиптика.ява.увм.компилятор.оболочки;

import рф.эллиптика.ява.увм.КлассыДелегирования;
import java.io.Serializable;
import рф.эллиптика.ява.увм.ШлюзовойКласс;

/**
 *
 * @author Антон Астафьев
 */
class ХолостоеДелегирование extends ДелегированиеОболочки {
	private static ХолостоеДелегирование экземпляр;
	
	static synchronized ХолостоеДелегирование дайЭкземпляр(){
		if (экземпляр==null){
			экземпляр = new ХолостоеДелегирование( new ПустойШлюз() );
		}
		return экземпляр;
	}

	public ХолостоеДелегирование(ОболочкаТелеКласса<?, ?> шлюз) {
		super(шлюз);
	}

	@Подмени @Override
	public Object дайОснову() {
		return шлюз.дайОснову();
	}

	@Подмени @Override
	public Serializable замена(Object obj) {
		return null;
	}

	@Подмени @Override
	public Object замена(Serializable obj) {
		return null;
	}

	@Подмени @Override
	public ШлюзовойКласс дайШлюз() {
		return шлюз;
	}
	
	@Подмени
	public <Рез, Откл extends Throwable, ОбщОткл extends Throwable>
	Рез простаяТелеФункция(КлассыДелегирования.Функтор0__<Рез, Откл, ОбщОткл> д) throws Откл {
		return null;
	}

	@Подмени
	public <Откл extends Throwable, ОбщОткл extends Throwable>
	void простойТелеВызов(КлассыДелегирования.Процедура0__<Откл, ОбщОткл> д) throws Откл {
	}

	@Подмени
	public <Рез, Пар1, Пар2, Пар3, Пар4, Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(КлассыДелегирования.Функтор4__<Рез, Пар1, Пар2, Пар3, Пар4, Откл, ОбщОткл> д, Пар1 п1, Пар2 п2, Пар3 п3, Пар4 п4) throws Откл {
		return null;
	}

	@Подмени
	public <Рез, Пар1, Пар2, Пар3, Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(КлассыДелегирования.Функтор3__<Рез, Пар1, Пар2, Пар3, Откл, ОбщОткл> д, Пар1 п1, Пар2 п2, Пар3 п3) throws Откл {
		return null;
	}

	@Подмени
	public <Рез, Пар1, Пар2, Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(КлассыДелегирования.Функтор2__<Рез, Пар1, Пар2, Откл, ОбщОткл>д, Пар1 п1, Пар2 п2) throws Откл {
		return null;
	}

	@Подмени
	public <Рез, Пар, Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(КлассыДелегирования.Функтор1__<Рез, Пар, Откл, ОбщОткл> д, Пар параметр) throws Откл {
		return null;
	}

	@Подмени
	public <Рез, Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(КлассыДелегирования.Функтор0__<Рез, Откл, ОбщОткл> д) throws Откл {
		return null;
	}

	@Подмени
	public <Пар1, Пар2, Пар3, Пар4, Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(КлассыДелегирования.Процедура3__<Пар1, Пар2, Пар3, Откл, ОбщОткл> д, Пар1 п1, Пар2 п2, Пар3 п3, Пар4 п4) throws Откл {
	}

	@Подмени
	public <Пар1, Пар2, Пар3, Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(КлассыДелегирования.Процедура3__<Пар1, Пар2, Пар3, Откл, ОбщОткл> д, Пар1 п1, Пар2 п2, Пар3 п3) throws Откл {
	}

	@Подмени
	public <Пар1, Пар2, Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(КлассыДелегирования.Процедура2__<Пар1, Пар2, Откл, ОбщОткл> д, Пар1 п1, Пар2 п2) throws Откл {
	}

	@Подмени
	public <Пар, Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(КлассыДелегирования.Процедура1__<Пар, Откл, ОбщОткл> д, Пар параметр) throws Откл {
	}

	@Подмени
	public <Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(КлассыДелегирования.Процедура0__<Откл, ОбщОткл> д) throws Откл {
	}

}
