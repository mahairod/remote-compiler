/*
 * Авторские права ↄ⃝ 2015, Антон Астафьев Ѱ҃
 *
 * Этот код — свободное программное обеспечение. Вы можете распространять и/или изменять его
 * при условии соблюдения положений Универсальной общественной лицензии GNU только 2-й версии, как
 * опубликовано Фондом Свободных Программ.
 *
 * Этот код распространяется с надеждой на то, что он будет полезен,
 * но БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, даже без подразумеваемой гарантии КОММЕРЧЕСКОЙ ЦЕННОСТИ или
 * СООТВЕТСТВИЯ КОНКРЕТНОМУ ПРЕДНАЗНАЧЕНИЮ. Смотрите текст Универсальной общественной лицензии GNU
 * 2-й версии для подробного объяснения (копия включена в файл ЛИЦЕНЗИЯ, поставляемый с этим кодом).
 *
 */

package рф.эллиптика.ява.увм;

import рф.эллиптика.ява.увм.КлассыДелегирования.*;

/**
 *
 * @author Антон Астафьев
 */
public abstract class МетодыДелегирования extends МетодыДелегированияСпец implements ОбъявлениеДелегирования {

	protected abstract <Рез, Откл extends Throwable, ОбщОткл extends Throwable>
	ОбработчикТелеВызова<Рез, Откл, ОбщОткл> об(ДелегатОбщий<Рез,Откл,ОбщОткл> функ);

	public
	<							Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(final Процедура0__ <							Откл, ОбщОткл> д)										throws Откл
	{	об(д).вызов();	}

	public
	<Пар0,						Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(final Процедура1__ <Пар0,					Откл, ОбщОткл> д, Пар0 п0)								throws Откл
		{	об(д).вызов(п0);	}

	public
	<Пар0, Пар1,				Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(final Процедура2__ <Пар0,Пар1,				Откл, ОбщОткл> д, Пар0 п0, Пар1 п1)						throws Откл
		{	об(д).вызов(п0, п1);	}

	public
	<Пар0,Пар1,Пар2,			Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(final Процедура3__ <Пар0,Пар1,Пар2,			Откл, ОбщОткл> д, Пар0 п0, Пар1 п1, Пар2 п2)			throws Откл
		{	об(д).вызов(п0, п1, п2);	}

	public
	<Пар0,Пар1,Пар2,Пар3,			Откл extends Throwable, ОбщОткл extends Throwable>
	void телеВызов(final Процедура3__ <Пар0,Пар1,Пар2,			Откл, ОбщОткл> д, Пар0 п0, Пар1 п1, Пар2 п2,Пар3 п3)	throws Откл
		{	об(д).вызов(п0, п1, п2, п3);	}

	public
	<Рез,						Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор0__<Рез,						Откл, ОбщОткл> д)										throws Откл
		{	return об(д).вызов().результат();	}

	public
	<Рез, Пар,					Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор1__<Рез, Пар,					Откл, ОбщОткл> д, Пар п0)								throws Откл
		{	return об(д).вызов(п0).результат();	}

	public
	<Рез, Пар0,Пар1,			Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор2__<Рез, Пар0,Пар1, 			Откл, ОбщОткл> д, Пар0 п0, Пар1 п1)						throws Откл
		{	return об(д).вызов(п0, п1).результат();	}

	public
	<Рез, Пар0,Пар1,Пар2,		Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор3__<Рез, Пар0,Пар1,Пар2,		Откл, ОбщОткл> д, Пар0 п0, Пар1 п1, Пар2 п2)			throws Откл
		{	return об(д).вызов(п0, п1, п2).результат();	}

	public
	<Рез, Пар0,Пар1,Пар2,Пар3,	Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор4__<Рез, Пар0,Пар1,Пар2,Пар3,	Откл, ОбщОткл> д, Пар0 п0, Пар1 п1, Пар2 п2, Пар3 п3)	throws Откл
		{	return об(д).вызов(п0, п1, п2, п3).результат();	}

	public
	<Рез, Пар0,Пар1,Пар2,Пар3,Пар4,	Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор5__<Рез,Пар0,Пар1,Пар2,Пар3,Пар4,Откл,ОбщОткл>д, Пар0 п0, Пар1 п1, Пар2 п2, Пар3 п3, Пар4 п4)	throws Откл
		{	return об(д).вызов(п0, п1, п2, п3, п4).результат();	}

	public
	<Рез, Пар0,Пар1,Пар2,Пар3,Пар4,Пар5,Пар6,	Откл extends Throwable, ОбщОткл extends Throwable>
	Рез телеФункция(final Функтор7__<Рез,Пар0,Пар1,Пар2,Пар3,Пар4,Пар5,Пар6,Откл,ОбщОткл>д, Пар0 п0, Пар1 п1, Пар2 п2, Пар3 п3, Пар4 п4, Пар5 п5, Пар6 п6)	throws Откл
		{	return об(д).вызов(п0, п1, п2, п3, п4, п5, п6).результат();	}

}
